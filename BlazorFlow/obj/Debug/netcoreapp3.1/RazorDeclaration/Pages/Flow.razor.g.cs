#pragma checksum "C:\Users\rene.ledoux\source\repos\BlazorFlow\BlazorFlow\Pages\Flow.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fe18546d25b4663fa483f6411410f93ed0ecaf52"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorFlow.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\rene.ledoux\source\repos\BlazorFlow\BlazorFlow\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\rene.ledoux\source\repos\BlazorFlow\BlazorFlow\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\rene.ledoux\source\repos\BlazorFlow\BlazorFlow\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\rene.ledoux\source\repos\BlazorFlow\BlazorFlow\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\rene.ledoux\source\repos\BlazorFlow\BlazorFlow\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\rene.ledoux\source\repos\BlazorFlow\BlazorFlow\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\rene.ledoux\source\repos\BlazorFlow\BlazorFlow\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\rene.ledoux\source\repos\BlazorFlow\BlazorFlow\_Imports.razor"
using BlazorFlow;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\rene.ledoux\source\repos\BlazorFlow\BlazorFlow\_Imports.razor"
using BlazorFlow.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\rene.ledoux\source\repos\BlazorFlow\BlazorFlow\Pages\Flow.razor"
using BlazorFlow.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\rene.ledoux\source\repos\BlazorFlow\BlazorFlow\Pages\Flow.razor"
using BlazorFlow.Shared.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\rene.ledoux\source\repos\BlazorFlow\BlazorFlow\Pages\Flow.razor"
using System.ComponentModel.DataAnnotations;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/flow")]
    public partial class Flow : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 59 "C:\Users\rene.ledoux\source\repos\BlazorFlow\BlazorFlow\Pages\Flow.razor"
       
    BlazorFlow.Data.Flow? CurrentFlow;
    FlowNode? CurrentNode;
    FlowLink[]? CurrentLinks;

    Model PageModel = new Model();

    bool isFirstNode => false;
    bool isLastNode => false;

    protected override async Task OnInitializedAsync()
    {
        var flowVersion = 1;
        CurrentFlow = await FlowService.GetFlow(flowVersion);
        CurrentNode = CurrentFlow.Vertices.First(x => x.FlowQuestion.FlowQuestionCode == "START");
        CurrentLinks = CurrentFlow.OutEdges(CurrentNode).ToArray();
    }

    void next()
    {
        if (CurrentLinks?.Length == 1)
        {
            CurrentNode = CurrentLinks[0].Target;
        }
        else
        {
            var availableLinks = new List<FlowLink>();

            foreach (var link in CurrentLinks!)
            {
                if (link.FlowCondition is { })
                {
                    switch (CurrentNode!.FlowNodeType)
                    {
                        case FlowNodeType.radio: if (link.FlowCondition.Evaluate(PageModel.RadioValue, null)) availableLinks.Add(link);
                            break;
                        case FlowNodeType.number: if (link.FlowCondition.Evaluate(null, PageModel.NumberValue)) availableLinks.Add(link);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (availableLinks.Count == 1)
            {
                CurrentNode = availableLinks[0].Target;
            }
        }

        CurrentLinks = CurrentFlow!.OutEdges(CurrentNode!).ToArray();
    }

    void previous()
    {
    }

    void submit()
    {
        NavigationManager.NavigateTo("/");
    }

    public class Model
    {
        [Range(0, 1)]
        public int RadioValue { get; set; }

        public decimal NumberValue { get; set; }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private FlowService FlowService { get; set; }
    }
}
#pragma warning restore 1591

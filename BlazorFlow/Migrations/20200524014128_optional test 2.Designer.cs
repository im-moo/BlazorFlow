// <auto-generated />
using System;
using BlazorFlow.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BlazorFlow.Migrations
{
    [DbContext(typeof(FlowContext))]
    [Migration("20200524014128_optional test 2")]
    partial class optionaltest2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BlazorFlow.Data.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("BlazorFlow.Data.Flow", b =>
                {
                    b.Property<int>("FlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("FlowVersion")
                        .HasColumnType("double precision");

                    b.HasKey("FlowId");

                    b.ToTable("Flows");
                });

            modelBuilder.Entity("BlazorFlow.Data.FlowAnswer", b =>
                {
                    b.Property<int>("FlowAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FlowAnswerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlowAnswerTextEn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlowAnswerTextFr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlowAnswerValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FlowNodeId")
                        .HasColumnType("integer");

                    b.HasKey("FlowAnswerId");

                    b.HasIndex("FlowNodeId");

                    b.ToTable("FlowAnswers");
                });

            modelBuilder.Entity("BlazorFlow.Data.FlowCondition", b =>
                {
                    b.Property<int>("FlowConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("FlowConditionId");

                    b.ToTable("FlowConditions");
                });

            modelBuilder.Entity("BlazorFlow.Data.FlowConditionValue", b =>
                {
                    b.Property<int>("FlowConditionValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FlowConditionId")
                        .HasColumnType("integer");

                    b.Property<string>("FlowConditionValueString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FlowConditionValueId");

                    b.HasIndex("FlowConditionId");

                    b.ToTable("FlowConditionValues");
                });

            modelBuilder.Entity("BlazorFlow.Data.FlowLink", b =>
                {
                    b.Property<int>("FlowLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FlowConditionId")
                        .HasColumnType("integer");

                    b.Property<int>("FlowId")
                        .HasColumnType("integer");

                    b.Property<double>("FlowLinkVersion")
                        .HasColumnType("double precision");

                    b.Property<int>("FlowNodeNextFlowNodeId")
                        .HasColumnType("integer");

                    b.Property<int>("FlowNodePreviousFlowNodeId")
                        .HasColumnType("integer");

                    b.HasKey("FlowLinkId");

                    b.HasIndex("FlowConditionId");

                    b.HasIndex("FlowId");

                    b.HasIndex("FlowNodeNextFlowNodeId");

                    b.HasIndex("FlowNodePreviousFlowNodeId");

                    b.ToTable("FlowLinks");
                });

            modelBuilder.Entity("BlazorFlow.Data.FlowNode", b =>
                {
                    b.Property<int>("FlowNodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FlowId")
                        .HasColumnType("integer");

                    b.Property<string>("FlowNodeEntity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlowNodeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("FlowNodeVersion")
                        .HasColumnType("double precision");

                    b.Property<int>("FlowQuestionId")
                        .HasColumnType("integer");

                    b.HasKey("FlowNodeId");

                    b.HasIndex("FlowId");

                    b.HasIndex("FlowQuestionId");

                    b.ToTable("FlowNodes");
                });

            modelBuilder.Entity("BlazorFlow.Data.FlowQuestion", b =>
                {
                    b.Property<int>("FlowQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FlowQuestionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlowQuestionTextEn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlowQuestionTextFr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FlowQuestionId");

                    b.ToTable("FlowQuestions");
                });

            modelBuilder.Entity("BlazorFlow.Data.UserFlow", b =>
                {
                    b.Property<int>("UserFlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FlowId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserFlowId");

                    b.HasIndex("FlowId");

                    b.ToTable("UserFlows");
                });

            modelBuilder.Entity("BlazorFlow.Data.UserFlowAnswer", b =>
                {
                    b.Property<int>("UserFlowAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FlowNodeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsStale")
                        .HasColumnType("boolean");

                    b.Property<int>("UserFlowId")
                        .HasColumnType("integer");

                    b.HasKey("UserFlowAnswerId");

                    b.HasIndex("FlowNodeId");

                    b.HasIndex("UserFlowId");

                    b.ToTable("UserFlowAnswers");
                });

            modelBuilder.Entity("BlazorFlow.Data.UserFlowAnswerValue", b =>
                {
                    b.Property<int>("UserFlowAnswerValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("UserFlowAnswerId")
                        .HasColumnType("integer");

                    b.Property<string>("UserFlowAnswerValueString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserFlowAnswerValueId");

                    b.HasIndex("UserFlowAnswerId");

                    b.ToTable("UserFlowAnswerValues");
                });

            modelBuilder.Entity("BlazorFlow.Data.FlowAnswer", b =>
                {
                    b.HasOne("BlazorFlow.Data.FlowNode", "FlowNode")
                        .WithMany("FlowAnswers")
                        .HasForeignKey("FlowNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorFlow.Data.FlowConditionValue", b =>
                {
                    b.HasOne("BlazorFlow.Data.FlowCondition", "FlowCondition")
                        .WithMany("FlowConditionValues")
                        .HasForeignKey("FlowConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorFlow.Data.FlowLink", b =>
                {
                    b.HasOne("BlazorFlow.Data.FlowCondition", "FlowCondition")
                        .WithMany()
                        .HasForeignKey("FlowConditionId");

                    b.HasOne("BlazorFlow.Data.Flow", "Flow")
                        .WithMany("FlowLinks")
                        .HasForeignKey("FlowId");

                    b.HasOne("BlazorFlow.Data.FlowNode", "FlowNodeNext")
                        .WithMany()
                        .HasForeignKey("FlowNodeNextFlowNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorFlow.Data.FlowNode", "FlowNodePrevious")
                        .WithMany()
                        .HasForeignKey("FlowNodePreviousFlowNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorFlow.Data.FlowNode", b =>
                {
                    b.HasOne("BlazorFlow.Data.Flow", "Flow")
                        .WithMany("FlowNodes")
                        .HasForeignKey("FlowId");

                    b.HasOne("BlazorFlow.Data.FlowQuestion", "FlowQuestion")
                        .WithMany("FlowNodes")
                        .HasForeignKey("FlowQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorFlow.Data.UserFlow", b =>
                {
                    b.HasOne("BlazorFlow.Data.Flow", "Flow")
                        .WithMany()
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorFlow.Data.UserFlowAnswer", b =>
                {
                    b.HasOne("BlazorFlow.Data.FlowNode", "FlowNode")
                        .WithMany()
                        .HasForeignKey("FlowNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorFlow.Data.UserFlow", "UserFlow")
                        .WithMany("UserFlowAnswers")
                        .HasForeignKey("UserFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorFlow.Data.UserFlowAnswerValue", b =>
                {
                    b.HasOne("BlazorFlow.Data.UserFlowAnswer", "UserFlowAnswer")
                        .WithMany("UserFlowAnswerValues")
                        .HasForeignKey("UserFlowAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

@page "/application"

@using BlazorFlow.Data
@using BlazorFlow.Shared.Components
@using System.ComponentModel.DataAnnotations

@inject FlowService FlowService
@inject NavigationManager NavigationManager

<h1>Flow</h1>

@if (CurrentNode is null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="PageModel">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div id="question">
        <p>@CurrentNode.FlowQuestion.FlowQuestionTextEn</p>
    </div>

    <div id="answer">
        @if (CurrentNode.FlowNodeType == FlowNodeType.singleChoice)
        {
            if (CurrentNode.FlowAnswers is { } flowAnswers)
            {
                @foreach (var answer in flowAnswers)
                {
                    <label class="radio-answer">
                        <InputRadio name="radio" SelectedValue="answer.FlowAnswerValue" @bind-Value="PageModel.SingleChoiceValue" />
                        @answer.FlowAnswerTextEn
                    </label>
                }
            }
        }
        else if (CurrentNode.FlowNodeType == FlowNodeType.numberCompare)
        {
            <InputNumber TValue="decimal?" @bind-Value="PageModel.NumberValue" />
        }
    </div>
</EditForm>

<div id="navigation" class="row">
    <button class="btn btn-primary" @onclick="Previous" disabled="@isFirstNode">Previous</button>

    @if (CurrentLinks?.Length == 0)
    {
        <button class="btn btn-primary" @onclick="Submit">Submit</button>
    }
    else
    {
        <button class="btn btn-primary" @onclick="Next">Next</button>
    }
</div>
}

@code {
    Flow CurrentFlow = null!;
    FlowNode? CurrentNode;
    FlowNodeType? CurrentNodeType => CurrentNode?.FlowNodeType;
    FlowLink[]? CurrentLinks => CurrentFlow.OutEdges(CurrentNode!).ToArray();
    UserFlow UserFlow = null!;
    LinkedList<LinkedListNode<UserFlowAnswer>> UserFlowAnswers => UserFlow.UserFlowAnswers;

    bool isFirstNode => false;
    bool isLastNode => false;

    Model PageModel = new Model();

    protected override async Task OnInitializedAsync()
    {
        var flowVersion = 1;
        CurrentFlow = await FlowService.GetFlow(flowVersion);
        CurrentNode = CurrentFlow.Vertices.First(x => x.FlowQuestion.FlowQuestionCode == "START");
        UserFlow = new UserFlow(1, flowVersion, 1);
    }

    void Next()
    {
        SaveAnswer();
        EvaluateLinks();
    }

    void Previous()
    {
        var prevUserFlowAnswer = UserFlowAnswers.Where(ufa => ufa.Next?.Value.FlowNodeId == CurrentNode?.FlowNodeId).FirstOrDefault();

        if (prevUserFlowAnswer is { Value: var userFlowAnswer } existing) {
            CurrentNode = CurrentFlow.Vertices.Where(n => n.FlowNodeId == userFlowAnswer.FlowNodeId).FirstOrDefault();
        }
    }

    void Submit()
    {
        NavigationManager.NavigateTo("/");
    }

    void SaveAnswer()
    {
        string[] newAnswerValue() => CurrentNodeType switch
        {
            FlowNodeType.singleChoice => new string[] { PageModel.SingleChoiceValue ?? "" },
            FlowNodeType.numberCompare => new string[] { PageModel.NumberValue.ToString() ?? "" },
            _ => new string[0]
        };

        var userFlowAnswer = UserFlowAnswers.Where(x => x.Value.FlowNodeId == CurrentNode!.FlowNodeId).FirstOrDefault();

        if (userFlowAnswer is {} existing)
        {
            if (existing.Value.UserFlowAnswerValue != newAnswerValue()) {
                userFlowAnswer.Value.UserFlowAnswerValue = newAnswerValue();
            }
        }
        else
        {
            userFlowAnswer = new LinkedListNode<UserFlowAnswer>(new UserFlowAnswer(0, CurrentNode!.FlowNodeId, newAnswerValue()));
            UserFlowAnswers.AddLast(userFlowAnswer);
        }
    }

    void EvaluateLinks()
    {
        if (CurrentLinks?.Length == 1)
        {
            CurrentNode = CurrentLinks[0].Target;
        }
        else if (CurrentLinks?.Length >= 2)
        {
            var availableLinks = new List<FlowLink>();

            // To be improved
            foreach (var link in CurrentLinks) {
                if (CurrentNodeType == FlowNodeType.singleChoice) {
                    if (link.FlowCondition!.Evaluate(new string[] { PageModel.SingleChoiceValue ?? string.Empty })) {
                        availableLinks.Add(link);
                    }
                }
                else if (CurrentNodeType == FlowNodeType.numberCompare) {
                    if (link.FlowCondition!.Evaluate(PageModel.NumberValue ?? default(decimal))) {
                        availableLinks.Add(link);
                    }
                }
            }

            if (availableLinks.Count > 1) {
                throw new NotImplementedException();
            }
            else {
                // To add next / prev to user node
                CurrentNode = availableLinks[0].Target;
            }
        }
    }

    public class Model
    {
        public string? SingleChoiceValue { get; set; }

        public decimal? NumberValue { get; set; }
    }
}

<style>
    button {
        margin: 0.15em;
    }

    #step {
        min-height: 120px;
    }

    .radio-answer {
        display: block;
    }
</style>

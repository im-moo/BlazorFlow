@page "/application"

@using System
@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations
@using BlazorFlow.Helpers
@using BlazorFlow.Models
@using BlazorFlow.Services
@using BlazorFlow.Shared.Components

@inject NavigationManager NavigationManager
@inject FlowService FlowService
@inject UserFlowService UserFlowService

<h1>Flow</h1>

@if (CurrentNode is null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="@PageModel" OnValidSubmit="Next">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div id="question">
        <p>@CurrentQuestion.FlowQuestionTextEn</p>
    </div>

    <div id="answer">
        @if (CurrentNodeType == FlowValueType.Radio)
        {
            if (CurrentAnswers is {} flowAnswers)
            {
                @foreach (var answer in flowAnswers)
                {
                    <label class="radio-answer">
                        <InputRadio name="radio" SelectedValue="answer.FlowAnswerValue" @bind-Value="PageModel.StringValue" />
                        @answer.FlowAnswerTextEn
                    </label>
                }
            }
        }
        else if (CurrentNodeType == FlowValueType.Select)
        {
            if (CurrentAnswers is {} flowAnswers)
            {
                <InputSelect @bind-Value="PageModel.StringValue">
                    <option value="">Select...</option>
                    @foreach (var answer in flowAnswers)
                    {
                        <option value="@answer.FlowAnswerValue">@answer.FlowAnswerTextEn</option>
                    }
                </InputSelect>
            }
            else if (CurrentNodeEntity is {} flowNodeEntity && PageModel.LookupValues is {} lookup)
            {
                <InputSelect @bind-Value="PageModel.StringValue">
                    <option value="">Select...</option>
                    @foreach (var value in lookup)
                    {
                        <option value="@value.Key">@value.Value</option>
                    }
                </InputSelect>
            }
        }
        else if (CurrentNodeType == FlowValueType.Number)
        {
            <InputNumber @bind-Value="PageModel.NumberValue" />
        }
        else if (CurrentNodeType == FlowValueType.Checkbox)
        {
            if (CurrentAnswers is {} flowAnswers)
            {
                @foreach (var answer in flowAnswers)
                {
                    <label class="checkbox-answer">
                        <input type="checkbox" name="checkbox" checked="@CheckboxIsChecked(answer.FlowAnswerValue)" @onchange="@((e) => CheckboxChanged(answer.FlowAnswerValue, e))" />
                        @answer.FlowAnswerTextEn
                    </label>
                }
            }
        }
        else if (CurrentNodeType == FlowValueType.DateTime)
        {
            <InputDate @bind-Value="PageModel.DateTimeValue" />
        }
        else if (CurrentNodeType == FlowValueType.Text)
        {
            <InputText @bind-Value="PageModel.StringValue" />
        }
        else if (CurrentNodeType == FlowValueType.TextArea)
        {
            <InputTextArea @bind-Value="PageModel.StringValue" />
        }
    </div>

    <div id="navigation" class="row">
        <button class="btn btn-primary" @onclick="Previous" disabled="@isFirstNode">Previous</button>
        <button class="btn btn-primary" type="submit">Next</button>
    </div>
</EditForm>
}

@code {
    Flow CurrentFlow = null!;
    FlowNode CurrentNode = null!;
    FlowValueType CurrentNodeType => CurrentNode.FlowNodeType;
    FlowNodeEntity CurrentNodeEntity => CurrentNode.FlowNodeEntity;
    FlowLink[]? CurrentLinks => CurrentNode is null ? new FlowLink[0] : CurrentFlow.OutEdges(CurrentNode).ToArray();
    FlowQuestion CurrentQuestion = null!;
    List<FlowAnswer>? CurrentAnswers;
    UserFlow CurrentUserFlow = null!;
    LinkedListNode<UserFlowNode>? CurrentUserFlowNode;

    bool isFirstNode => CurrentFlow.Edges.All(l => l.Target != CurrentNode);
    bool isLastNode => CurrentFlow.IsOutEdgesEmpty(CurrentNode);

    Model PageModel = new Model();

    protected override async Task OnInitializedAsync()
    {
        CurrentFlow = await FlowService.GetFlow(1);
        CurrentUserFlow = await UserFlowService.GetUserFlow(1);
        CurrentNode = CurrentFlow.Vertices.First(n => n.FlowNodeId == 1); // To improve
        // To move out into SetModel
        CurrentQuestion = await FlowService.GetFlowNodeQuestion(CurrentNode.FlowQuestionId);
        CurrentAnswers = await FlowService.GetFlowNodeAnswers(CurrentNode.FlowNodeId);
        SetModel();
    }

    // To be improved
    void SetModel()
    {
        if (CurrentNodeEntity is {} entity && entity != FlowNodeEntity.None)
        {
            PageModel.LookupValues = LookupService.GetLookup(entity);
        }
        else
        {
            PageModel.LookupValues?.Clear();
        }

        CurrentUserFlowNode = CurrentUserFlow.UserFlowNodes.Nodes().FirstOrDefault(x => x.Value.FlowNodeId == CurrentNode.FlowNodeId);

        if (CurrentUserFlowNode is { Value: var userFlowNode } existing)
        {
            if (CurrentNodeType == FlowValueType.Radio || CurrentNodeType == FlowValueType.Select)
            {
                PageModel.StringValue = userFlowNode?.UserFlowAnswers?.FirstOrDefault() ?? string.Empty;
            }
            else if (CurrentNodeType == FlowValueType.Number)
            {
                var parsed = Decimal.TryParse(userFlowNode?.UserFlowAnswers?.FirstOrDefault(), out var result);

                if (parsed)
                {
                    PageModel.NumberValue = result;
                }
            }
            else if (CurrentNodeType == FlowValueType.Checkbox)
            {
                var hashSet = new HashSetComparable<string>(userFlowNode.UserFlowAnswers!);
                PageModel.CheckboxValues = hashSet;
            }
            else if (CurrentNodeType == FlowValueType.DateTime)
            {
                var parsed = DateTime.TryParse(userFlowNode?.UserFlowAnswers?.FirstOrDefault(), out var result);

                if (parsed)
                {
                    PageModel.DateTimeValue = result;
                }
            }
            else if (CurrentNodeType == FlowValueType.Text || CurrentNodeType == FlowValueType.TextArea)
            {
                PageModel.StringValue = userFlowNode?.UserFlowAnswers?.FirstOrDefault() ?? string.Empty;
            }
        }
        else
        {
            PageModel.StringValue = string.Empty;
            PageModel.NumberValue = default(decimal);
            PageModel.CheckboxValues?.Clear();
            PageModel.DateTimeValue = default(DateTime);
        }
    }

    void Previous()
    {
        // User has answered this question before, so there should be an answer that targets this node
        var prevUserFlowNodeId = CurrentUserFlow.UserFlowNodes.Nodes().FirstOrDefault(ufa => ufa.Next?.Value.FlowNodeId == CurrentNode?.FlowNodeId)?.Value.FlowNodeId;
        // User hasn't answered this question yet, therefore the previous answer target is still null, so use the last answer that isn't stale
        prevUserFlowNodeId ??= CurrentUserFlow.UserFlowNodes.Nodes().Where(ufa => ufa.Value.IsStale == false).Last().Value.FlowNodeId;

        CurrentNode = CurrentFlow.Vertices.First(n => n.FlowNodeId == prevUserFlowNodeId);
        SetModel();
        StateHasChanged(); // Not sure if needed
    }

    void Next()
    {
        SaveAnswer();
        var appointedLink = EvaluateLinks();
        // if no links, we're at the end
        // NavigationManager.NavigateTo("/");
        CurrentNode = appointedLink.Target;
        SetModel();
        StateHasChanged(); // Not sure if needed
    }

    bool CheckboxIsChecked(string flowAnswerValue)
    {
        return PageModel.CheckboxValues?.Contains(flowAnswerValue) ?? false;
    }

    // To be improved
    void CheckboxChanged(string checkboxValue, ChangeEventArgs e)
    {
        PageModel.CheckboxValues ??= new HashSetComparable<string>();
        var isChecked = (bool)e.Value;

        if (isChecked && !PageModel.CheckboxValues.Contains(checkboxValue))
        {
            PageModel.CheckboxValues.Add(checkboxValue);
        }
        else if (!isChecked && PageModel.CheckboxValues.Contains(checkboxValue))
        {
            PageModel.CheckboxValues.Remove(checkboxValue);
        }
    }

    async void SaveAnswer()
    {
        // To be improved
        List<string> newAnswerValue() => CurrentNodeType switch
        {
            FlowValueType.Radio => new List<string> { PageModel.StringValue! },
            FlowValueType.Select => new List<string> { PageModel.StringValue! },
            FlowValueType.Number => new List<string> { PageModel.NumberValue.ToString()! },
            FlowValueType.Checkbox => PageModel.CheckboxValues.ToList(),
            FlowValueType.DateTime => new List<string> { PageModel.DateTimeValue.ToString()! },
            FlowValueType.Text => new List<string> { PageModel.StringValue! },
            FlowValueType.TextArea => new List<string> { PageModel.StringValue! },
            _ => new List<string>()
        };

        if (CurrentUserFlowNode is {} existing)
        {
            if (existing.Value.UserFlowAnswers != newAnswerValue())
            {
                CurrentUserFlowNode.Value.UserFlowAnswers = newAnswerValue();
                CurrentUserFlowNode.Value.IsStale = false;
            }

            // Set all subsequent userFlowNodes as stale
            var nextUserFlowAnswer = CurrentUserFlowNode.Next;

            while (nextUserFlowAnswer is {} alsoExisting)
            {
                nextUserFlowAnswer.Value.IsStale = true;
                nextUserFlowAnswer = nextUserFlowAnswer.Next;
            }

            await UserFlowService.UpdateUserFlowAnswer(CurrentUserFlowNode.Value);
        }
        else
        {
            CurrentUserFlowNode = new LinkedListNode<UserFlowNode>(new UserFlowNode(CurrentNode.FlowNodeId, newAnswerValue()));

            if (CurrentUserFlow.UserFlowNodes.Any())
            {
                var lastUserFlowAnswer = CurrentUserFlow.UserFlowNodes.Last!;
                CurrentUserFlow.UserFlowNodes.AddAfter(lastUserFlowAnswer, CurrentUserFlowNode);
            }
            else
            {
                CurrentUserFlow.UserFlowNodes.AddFirst(CurrentUserFlowNode);
            }

            await UserFlowService.AddUserFlowAnswer(CurrentUserFlowNode.Value);
        }
    }

    FlowLink EvaluateLinks()
    {
        if (CurrentLinks?.Length == 0)
        {
            throw new NotImplementedException();
        }
        else if (CurrentLinks?.Length == 1)
        {
            return CurrentLinks.First();
        }
        else
        {
            var availableLinks = new List<FlowLink>();

            // To be improved; no condition means automatic pass
            foreach (var link in CurrentLinks!)
            {
                if (CurrentNodeType == FlowValueType.Radio || CurrentNodeType == FlowValueType.Select)
                {
                    //if (link.FlowCondition?.Evaluate(PageModel.StringValue) ?? true)
                    if (link.IsAvailable(PageModel.StringValue!))
                    {
                        availableLinks.Add(link);
                    }
                }
                else if (CurrentNodeType == FlowValueType.Number)
                {
                    //if (link.FlowCondition?.Evaluate(PageModel.NumberValue) ?? true)
                    if (link.IsAvailable(PageModel.NumberValue!))
                    {
                        availableLinks.Add(link);
                    }
                }
                else if (CurrentNodeType == FlowValueType.Checkbox)
                {
                    //if (link.FlowCondition?.Evaluate(PageModel.CheckboxValues) ?? true)
                    //{
                        //availableLinks.Add(link);
                    //}
                }
                else if (CurrentNodeType == FlowValueType.DateTime)
                {
                    //if (link.FlowCondition?.Evaluate(PageModel.DateTimeValue) ?? true)
                    if (link.IsAvailable(PageModel.DateTimeValue))
                    {
                        availableLinks.Add(link);
                    }
                }
            }

            if (availableLinks.Count > 1)
            {
                // Go to link with condition since no condition is catch-all
                return availableLinks.First(l => l.HasCondition());
            }
            else
            {
                return availableLinks.First();
            }
        }
    }

    // To add validation
    public class Model
    {
        public string? StringValue { get; set; }

        public decimal? NumberValue { get; set; }

        public HashSetComparable<string>? CheckboxValues { get; set; }

        // Nullable DateTimes not supported; broken in Safari
        public DateTime DateTimeValue { get; set; }

        public Dictionary<string, string>? LookupValues { get; set; }
    }
}

<style>
    button {
        margin-left: 0.5em;
    }

    input, textarea, select {
        margin-bottom: 1em;
    }

    .radio-answer, .checkbox-answer {
        display: block;
    }
</style>

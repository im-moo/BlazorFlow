@page "/application"

@using BlazorFlow.Data
@using BlazorFlow.Shared.Components
@using System.ComponentModel.DataAnnotations

@inject FlowService FlowService
@inject NavigationManager NavigationManager

<h1>Flow</h1>

@if (CurrentNode is null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="PageModel">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div id="question">
        <p>@CurrentNode.FlowQuestion.FlowQuestionTextEn</p>
    </div>

    <div id="answer">
        @if (CurrentNode.FlowNodeType == FlowNodeType.singleChoice)
        {
            if (CurrentNode.FlowAnswers is { } flowAnswers)
            {
                @foreach (var answer in flowAnswers)
                {
                    <label class="radio-answer">
                        <InputRadio name="radio" SelectedValue="answer.FlowAnswerValue" @bind-Value="PageModel.SingleChoiceValue" />
                        @answer.FlowAnswerTextEn
                    </label>
                }
            }
        }
        else if (CurrentNode.FlowNodeType == FlowNodeType.numberCompare)
        {
            <InputNumber TValue="decimal?" @bind-Value="PageModel.NumberValue" />
        }
    </div>
</EditForm>

<div id="navigation" class="row">
    <button class="btn btn-primary" @onclick="previous" disabled="@isFirstNode">Previous</button>

    @if (CurrentLinks?.Length == 0)
    {
        <button class="btn btn-primary" @onclick="submit">Submit</button>
    }
    else
    {
        <button class="btn btn-primary" @onclick="next">Next</button>
    }
</div>
}

@code {
    Flow CurrentFlow = null!;
    FlowNode? CurrentNode;
    FlowNodeType? CurrentNodeType => CurrentNode?.FlowNodeType;
    FlowLink[]? CurrentLinks => CurrentFlow.OutEdges(CurrentNode!).ToArray();
    UserFlow UserFlow = null!;
    LinkedList<LinkedListNode<UserFlowAnswer>> UserFlowAnswers => UserFlow.UserFlowAnswers;

    bool isFirstNode => false;
    bool isLastNode => false;

    Model PageModel = new Model();

    protected override async Task OnInitializedAsync()
    {
        var flowVersion = 1;
        CurrentFlow = await FlowService.GetFlow(flowVersion);
        CurrentNode = CurrentFlow.Vertices.First(x => x.FlowQuestion.FlowQuestionCode == "START");
        UserFlow = new UserFlow(1, flowVersion, 1);
    }

    void next()
    {
        SaveUserAnswer();

        EvaluateLinks();
    }

    void previous()
    {
        throw new NotImplementedException();
    }

    void submit()
    {
        NavigationManager.NavigateTo("/");
    }

    void SaveUserAnswer()
    {
        // check if userNode already exists for this flowNode
        var userFlowAnswer = UserFlowAnswers.Where(x => x.Value.FlowNodeId == CurrentNode!.FlowNodeId).FirstOrDefault();
        string[] answerValue;

        switch (CurrentNodeType)
        {
            case FlowNodeType.singleChoice:
                answerValue = new string[] { PageModel.SingleChoiceValue ?? "" };
                break;
            case FlowNodeType.numberCompare:
                answerValue = new string[] { PageModel.NumberValue.ToString() ?? "" };
                break;
            default:
                answerValue = new string[0];
                break;
        }

        // userNode already exists for this flowNode, compare current answer with existing answer
        if (userFlowAnswer is {} ufa)
        {
            // difference found, update current userNode
            if (ufa.Value.UserFlowAnswerValue != answerValue) {
                userFlowAnswer.Value.UserFlowAnswerValue = answerValue;
            }
        }

        // no userNode exists for this flowNode, create new
        else
        {
             userFlowAnswer = new LinkedListNode<UserFlowAnswer>(new UserFlowAnswer(0, CurrentNode!.FlowNodeId, answerValue));
        }

        if (UserFlowAnswers.Count() == 0)
        {
            UserFlowAnswers.AddFirst(userFlowAnswer);
        }
        else
        {
            // Add to the end
            throw new NotImplementedException();
        }
    }

    void EvaluateLinks()
    {
        if (CurrentLinks?.Length == 1)
        {
            CurrentNode = CurrentLinks[0].Target;
        }
        else if (CurrentLinks?.Length >= 2)
        {
            var availableLinks = CurrentLinks.Where(l => l.IsAvailable()).ToList();

            if (availableLinks.Count == 1)
            {
                CurrentNode = availableLinks[0].Target;
            }
        }
    }

    public class Model
    {
        public string? SingleChoiceValue { get; set; }

        public decimal? NumberValue { get; set; }
    }
}

<style>
    button {
        margin: 0.15em;
    }

    #step {
        min-height: 120px;
    }

    .radio-answer {
        display: block;
    }
</style>

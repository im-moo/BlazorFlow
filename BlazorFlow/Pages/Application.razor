@page "/application"

@using BlazorFlow.Data
@using BlazorFlow.Helpers
@using BlazorFlow.Shared.Components

@inject NavigationManager NavigationManager
@inject FlowService FlowService

<h1>Flow</h1>

@if (CurrentNode is null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="@PageModel">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div id="question">
        <p>@CurrentNode.FlowQuestion.FlowQuestionTextEn</p>
    </div>

    <div id="answer">
        @if (CurrentNode.FlowNodeType == FlowNodeType.singleChoice)
        {
            if (CurrentNode.FlowAnswers is { } flowAnswers)
            {
                @foreach (var answer in flowAnswers)
                {
                    <label class="radio-answer">
                        <InputRadio name="radio" SelectedValue="answer.FlowAnswerValue" @bind-Value="PageModel.SingleChoiceValue" />
                        @answer.FlowAnswerTextEn
                    </label>
                }
            }
        }
        else if (CurrentNode.FlowNodeType == FlowNodeType.numberCompare)
        {
            <InputNumber TValue="decimal?" @bind-Value="PageModel.NumberValue" />
        }
        else if (CurrentNode.FlowNodeType == FlowNodeType.multiChoice)
        {
            if (CurrentNode.FlowAnswers is { } flowAnswers)
            {
                @foreach (var answer in flowAnswers)
                {
                    <label class="checkbox-answer">
                        <input type="checkbox" name="checkbox" checked="@CheckboxIsChecked(answer.FlowAnswerValue)" @onchange="@((e) => CheckboxChanged(answer.FlowAnswerValue, e))" />
                        @answer.FlowAnswerTextEn
                    </label>
                }
            }
        }
    </div>
</EditForm>

<div id="navigation" class="row">
    <button class="btn btn-primary" @onclick="Previous" disabled="@isFirstNode">Previous</button>

    @if (CurrentLinks?.Length == 0)
    {
        <button class="btn btn-primary" @onclick="Submit">Submit</button>
    }
    else
    {
        <button class="btn btn-primary" @onclick="Next">Next</button>
    }
</div>
}

@code {
    Flow CurrentFlow = null!;
    FlowNode? CurrentNode;
    FlowNodeType? CurrentNodeType => CurrentNode?.FlowNodeType;
    FlowLink[]? CurrentLinks => CurrentFlow.OutEdges(CurrentNode!).ToArray();

    UserFlow CurrentUserFlow = null!;
    LinkedListNode<UserFlowAnswer>? CurrentUserFlowAnswer;

    bool isFirstNode => CurrentFlow.Edges.All(l => l.Target != CurrentNode);
    bool isLastNode => CurrentFlow.IsOutEdgesEmpty(CurrentNode!);

    Model PageModel = new Model();

    protected override async Task OnInitializedAsync()
    {
        var flowVersion = 1;
        CurrentFlow = await FlowService.GetFlow(flowVersion);
        CurrentNode = CurrentFlow.Vertices.First(x => x.FlowQuestion.FlowQuestionCode == "START"); // To use algorithm instead of hard coding
        CurrentUserFlow = new UserFlow(1, flowVersion, 1);
        SetUserAnswer();
    }

    void Next()
    {
        SaveAnswer();
        var appointedLink = EvaluateLinks();
        CurrentNode = appointedLink.Target;
        SetUserAnswer();
    }

    void Previous()
    {
        // User has answered this question before, so there should be an answer that targets this node
        var prevUserFlowAnswerId = CurrentUserFlow.UserFlowAnswers.Nodes().FirstOrDefault(ufa => ufa.Next?.Value.FlowNodeId == CurrentNode?.FlowNodeId)?.Value.FlowNodeId;
        // User hasn't answered this question yet, therefore the previous answer target is still null, so use the last answer that isn't stale
        prevUserFlowAnswerId ??= CurrentUserFlow.UserFlowAnswers.Nodes().Where(ufa => ufa.Value.isStale == false).Last().Value.FlowNodeId;

        CurrentNode = CurrentFlow.Vertices.First(n => n.FlowNodeId == prevUserFlowAnswerId);
        SetUserAnswer();
    }

    void Submit()
    {
        NavigationManager.NavigateTo("/");
    }

    bool CheckboxIsChecked(string flowAnswerValue) {
        return PageModel.MultiChoiceValues?.Contains(flowAnswerValue) ?? false;
    }

    // To be improved
    void CheckboxChanged(string checkboxValue, ChangeEventArgs e) {
        PageModel.MultiChoiceValues ??= new HashSet<string>();
        var isChecked = (bool)e.Value;

        if (isChecked && !PageModel.MultiChoiceValues.Contains(checkboxValue)) {
            PageModel.MultiChoiceValues.Add(checkboxValue);
        }
        else if (!isChecked && PageModel.MultiChoiceValues.Contains(checkboxValue)) {
            PageModel.MultiChoiceValues.Remove(checkboxValue);
        }
    }

    void SaveAnswer()
    {
        // To be improved
        string[] newAnswerValue() => CurrentNodeType switch
        {
            FlowNodeType.singleChoice => new string[] { PageModel.SingleChoiceValue!},
            FlowNodeType.numberCompare => new string[] { PageModel.NumberValue.ToString()!},
            FlowNodeType.multiChoice => PageModel.MultiChoiceValues.ToArray(),
            _ => new string[0]
        };

        if (CurrentUserFlowAnswer is {} existing)
        {
            if (existing.Value.UserFlowAnswerValue != newAnswerValue()) {
                CurrentUserFlowAnswer.Value.UserFlowAnswerValue = newAnswerValue();
                CurrentUserFlowAnswer.Value.isStale = false;
            }

            // Set all subsequent userFlowAnswers as stale
            var nextUserFlowAnswer = CurrentUserFlowAnswer.Next;

            while (nextUserFlowAnswer is {} alsoExisting) {
                nextUserFlowAnswer.Value.isStale = true;
                nextUserFlowAnswer = nextUserFlowAnswer.Next;
            }
        }
        else
        {
            CurrentUserFlowAnswer = new LinkedListNode<UserFlowAnswer>(new UserFlowAnswer(0, CurrentNode!.FlowNodeId, newAnswerValue()));

            if (CurrentUserFlow.UserFlowAnswers.Any()) {
                var lastUserFlowAnswer = CurrentUserFlow.UserFlowAnswers.Last!;
                CurrentUserFlow.UserFlowAnswers.AddAfter(lastUserFlowAnswer, CurrentUserFlowAnswer);
            }
            else {
                CurrentUserFlow.UserFlowAnswers.AddFirst(CurrentUserFlowAnswer);
            }
        }
    }

    FlowLink EvaluateLinks()
    {
        if (CurrentLinks?.Length == 0) {
            throw new NotImplementedException();
        }
        else if (CurrentLinks?.Length == 1)
        {
            return CurrentLinks.First();
        }
        else
        {
            var availableLinks = new List<FlowLink>();

            // To be improved
            foreach (var link in CurrentLinks!) {
                if (CurrentNodeType == FlowNodeType.singleChoice) {
                    if (link.FlowCondition?.Evaluate(PageModel.SingleChoiceValue) ?? true) {
                        availableLinks.Add(link);
                    }
                }
                else if (CurrentNodeType == FlowNodeType.numberCompare) {
                    if (link.FlowCondition?.Evaluate(PageModel.NumberValue) ?? true) {
                        availableLinks.Add(link);
                    }
                }
                else if (CurrentNodeType == FlowNodeType.multiChoice) {
                    if (link.FlowCondition?.Evaluate(PageModel.MultiChoiceValues) ?? true) {
                        availableLinks.Add(link);
                    }
                }
            }

            if (availableLinks.Count > 1) {
                // Go to link with condition since no condition is catch-all
                return availableLinks.First(l => l.FlowCondition != null);
            }
            else {
                return availableLinks.First();
            }
        }
    }

    // To be improved
    void SetUserAnswer() {
        CurrentUserFlowAnswer = CurrentUserFlow.UserFlowAnswers.Nodes().FirstOrDefault(x => x.Value.FlowNodeId == CurrentNode!.FlowNodeId);

        if (CurrentUserFlowAnswer is { Value: var userFlowAnswer } existing) {
            if (CurrentNodeType == FlowNodeType.singleChoice) {
                PageModel.SingleChoiceValue = userFlowAnswer?.UserFlowAnswerValue?.First() ?? string.Empty;
            }
            else if (CurrentNodeType == FlowNodeType.numberCompare) {
                var parsed = Decimal.TryParse(userFlowAnswer?.UserFlowAnswerValue?.First(), out decimal result);

                if (parsed) {
                    PageModel.NumberValue = result;
                }
            }
            else if (CurrentNodeType == FlowNodeType.multiChoice) {
                var hashSet = new HashSet<string>(userFlowAnswer.UserFlowAnswerValue!);
                PageModel.MultiChoiceValues = hashSet;
            }
        }
    }

    // To add validation
    public class Model
    {
        public string? SingleChoiceValue { get; set; }

        public decimal? NumberValue { get; set; }

        public HashSet<string>? MultiChoiceValues { get;set; }
    }
}

<style>
    button {
        margin: 0.15em;
    }

    #step {
        min-height: 120px;
    }

    .radio-answer {
        display: block;
    }
</style>

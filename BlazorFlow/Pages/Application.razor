@page "/application"

@using System
@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations
@using BlazorFlow.Enums
@using BlazorFlow.Extensions
@using BlazorFlow.Helpers
@using BlazorFlow.Models
@using BlazorFlow.Services
@using BlazorFlow.Shared.Components

@inject NavigationManager NavigationManager
@inject IFlowService FlowService
@inject IUserFlowService UserFlowService
@inject ILookupService LookupService

<h1>Flow</h1>

@if (CurrentNode is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@PageModel">
        <div id="question">
            <p>@CurrentQuestion.FlowQuestionTextEn</p>
        </div>

        <div id="answer">
            @if (CurrentAnswers is {} existingAnswers && existingAnswers.Any())
            {
                @if (CurrentNodeType == FlowValueType.Radio)
                {
                    @foreach (var answer in existingAnswers)
                    {
                        <label class="radio-answer">
                            <InputRadio name="radio" SelectedValue="answer.FlowAnswerValue" @bind-Value="PageModel.StringValue"></InputRadio>
                            @answer.FlowAnswerTextEn
                        </label>
                    }
                }
                else if (CurrentNodeType == FlowValueType.Select)
                {
                    <InputSelect @bind-Value="PageModel.StringValue">
                        <option value="">Select...</option>
                        @foreach (var answer in existingAnswers)
                        {
                            <option value="@answer.FlowAnswerValue">@answer.FlowAnswerTextEn</option>
                        }
                    </InputSelect>
                }
                else if (CurrentNodeType == FlowValueType.Checkbox)
                {
                    @foreach (var answer in existingAnswers)
                    {
                        <label class="checkbox-answer">
                            <input type="checkbox" name="checkbox" checked="@CheckboxIsChecked(answer.FlowAnswerValue)" @onchange="@((e) => CheckboxChanged(answer.FlowAnswerValue, e))" />
                            @answer.FlowAnswerTextEn
                        </label>
                    }
                }
            }
            else
            {
                if (CurrentNodeType == FlowValueType.Number)
                {
                    <InputNumber @bind-Value="PageModel.NumberValue"></InputNumber>
                }
                else if (CurrentNodeType == FlowValueType.DateTime)
                {
                    <InputDate @bind-Value="PageModel.DateTimeValue"></InputDate>
                }
                else if (CurrentNodeType == FlowValueType.Text)
                {
                    <InputText @bind-Value="PageModel.StringValue"></InputText>
                }
                else if (CurrentNodeType == FlowValueType.TextArea)
                {
                    <InputTextArea @bind-Value="PageModel.StringValue"></InputTextArea>
                }
            }
        </div>

        <div id="navigation" class="row">
            <button class="btn btn-primary" @onclick="Previous" disabled="@isFirstNode">Previous</button>
            @if (isLastNode)
            {
                <button class="btn btn-primary" @onclick="Submit">Submit</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="Next">Next</button>
            }
        </div>
    </EditForm>
}

@code
{
    Flow CurrentFlow = null!;
    FlowNode CurrentNode = null!;
    FlowValueType CurrentNodeType => CurrentNode.FlowNodeType;
    FlowEntity CurrentNodeEntity => CurrentNode.FlowNodeEntity;
    FlowLink[]? CurrentLinks => CurrentNode is null ? new FlowLink[0] : CurrentFlow.OutEdges(CurrentNode).ToArray();
    FlowQuestion CurrentQuestion = null!;
    List<FlowAnswer>? CurrentAnswers;
    UserFlow CurrentUserFlow = null!;
    LinkedListNode<UserFlowNode>? CurrentUserFlowNode;

    bool isFirstNode => CurrentFlow.Edges.All(l => l.Target != CurrentNode);
    bool isLastNode => CurrentFlow.IsOutEdgesEmpty(CurrentNode);

    Model PageModel = new Model();

    protected override async Task OnInitializedAsync()
    {
        var flowId = 1;
        var userId = 1;

        CurrentFlow = await FlowService.GetFlow(1);
        CurrentUserFlow = await UserFlowService.GetUserFlow(flowId);
        CurrentUserFlow ??= await UserFlowService.CreateUserFlow(userId, CurrentFlow.FlowId);
        CurrentNode = CurrentFlow.Vertices.First(n => n.FlowNodeId == 1); // To improve
        
        UpdateView();
    }

    // To be improved
    void UpdateView()
    {
        CurrentQuestion = FlowService.GetFlowNodeQuestion(CurrentNode.FlowQuestionId);

        if (CurrentNodeEntity is FlowEntity.None)
        {
            CurrentAnswers = FlowService.GetFlowNodeAnswers(CurrentNode.FlowNodeId);
        }
        else
        {
            CurrentAnswers = LookupService.GetLookupValues(CurrentNodeEntity);
        }

        CurrentUserFlowNode = CurrentUserFlow.UserFlowNodes.Nodes().FirstOrDefault(x => x.Value.FlowNodeId == CurrentNode.FlowNodeId);

        if (CurrentUserFlowNode is { Value: var userFlowNode } existing && userFlowNode.UserFlowAnswers.Any())
        {
            if (CurrentNodeType == FlowValueType.Radio || CurrentNodeType == FlowValueType.Select)
            {
                var userAnswer = userFlowNode.UserFlowAnswers.FirstOrDefault().UserFlowAnswerValue.ToString();
                PageModel.StringValue = userAnswer;
            }
            else if (CurrentNodeType == FlowValueType.Number)
            {
                var userAnswer = userFlowNode.UserFlowAnswers.FirstOrDefault().UserFlowAnswerValue.ToString();
                if (Decimal.TryParse(userAnswer, out decimal parsedAnswer))
                {
                    PageModel.NumberValue = parsedAnswer;
                }
            }
            else if (CurrentNodeType == FlowValueType.Checkbox)
            {
                var userAnswers = userFlowNode.UserFlowAnswers.ConvertAll(a => a.UserFlowAnswerValue.ToString());
                if (userAnswers.Any())
                {
                    PageModel.CheckboxValues = new HashSet<string>(userAnswers!);
                }
            }
            else if (CurrentNodeType == FlowValueType.DateTime)
            {
                var userAnswer  = userFlowNode.UserFlowAnswers.FirstOrDefault().UserFlowAnswerValue.ToString();
                if (DateTime.TryParse(userAnswer, out DateTime parsedAnswer))
                {
                    PageModel.DateTimeValue = parsedAnswer;
                }
            }
            else if (CurrentNodeType == FlowValueType.Text || CurrentNodeType == FlowValueType.TextArea)
            {
                var userAnswer = userFlowNode.UserFlowAnswers.FirstOrDefault().UserFlowAnswerValue.ToString();
                PageModel.StringValue = userAnswer;
            }
        }
        else
        {
            PageModel.StringValue = default(string);
            PageModel.NumberValue = default(decimal);
            PageModel.CheckboxValues?.Clear();
            PageModel.DateTimeValue = DateTime.Now;
        }
    }

    void Previous()
    {
        // User has answered this question before, so there should be an answer that targets this node
        var prevUserFlowNodeId = CurrentUserFlow.UserFlowNodes.Nodes().FirstOrDefault(ufa => ufa.Next?.Value.FlowNodeId == CurrentNode?.FlowNodeId)?.Value.FlowNodeId;
        // User hasn't answered this question yet, therefore the previous answer target is still null, so use the last answer that isn't stale
        prevUserFlowNodeId ??= CurrentUserFlow.UserFlowNodes.Nodes().Where(ufa => ufa.Value.IsStale == false).Last().Value.FlowNodeId;

        CurrentNode = CurrentFlow.Vertices.First(n => n.FlowNodeId == prevUserFlowNodeId);
        UpdateView();
    }

    void Next()
    {
        SaveAnswer();
        var appointedLink = EvaluateLinks();
        CurrentNode = appointedLink.Target;
        UpdateView();
    }

    void Submit()
    {
        SaveAnswer();
        NavigationManager.NavigateTo("/");
    }

    async void SaveAnswer()
    {
        var userFlowAnswers = AnswerValueHelper.GetUserFlowAnswerModels(CurrentNodeType, PageModel);

        // Check if user has answered this question before
        if (CurrentUserFlowNode is {} existingUserNode)
        {
            if (CurrentNodeType != FlowValueType.None)
            {
                // Check if existing answers changed and update if needed; to be improved
                var differentAnswers = existingUserNode.Value.UserFlowAnswers.Except(userFlowAnswers).Any() ||
                    existingUserNode.Value.UserFlowAnswers.Count() != userFlowAnswers.Count();

                if (differentAnswers)
                {
                    existingUserNode.Value.UserFlowAnswers = userFlowAnswers;
                    existingUserNode.Value.IsStale = false;
                    await UserFlowService.UpdateUserFlowNode(existingUserNode.Value);

                    // Set all subsequent userFlowNodes as stale
                    while (existingUserNode.Next is {} nextExistingUserNode)
                    {
                        nextExistingUserNode.Value.IsStale = true;
                        await UserFlowService.UpdateUserFlowNode(nextExistingUserNode.Value);
                        existingUserNode = nextExistingUserNode;
                    }
                }
            }
        }
        // User hasn't answered this question before, so create a new user node
        else
        {
            CurrentUserFlowNode = new LinkedListNode<UserFlowNode>(new UserFlowNode(CurrentUserFlow.UserFlowId, CurrentNode.FlowNodeId, userFlowAnswers));

            if (CurrentUserFlow.UserFlowNodes.Last is {} existingLastNode)
            {
                CurrentUserFlow.UserFlowNodes.AddAfter(existingLastNode, CurrentUserFlowNode);
            }
            else
            {
                CurrentUserFlow.UserFlowNodes.AddFirst(CurrentUserFlowNode);
            }

            await UserFlowService.AddUserFlowNode(CurrentUserFlowNode.Value);
        }
    }

    // Need to be able to iterate over collections for checkboxes
    FlowLink EvaluateLinks()
    {
        if (CurrentLinks?.Length == 0)
        {
            throw new NotImplementedException();
        }
        else if (CurrentLinks?.Length == 1)
        {
            return CurrentLinks.First();
        }
        else
        {
            var availableLinks = new List<FlowLink>();

            // To be improved; no condition means automatic pass
            foreach (var link in CurrentLinks!)
            {
                if (CurrentNodeType == FlowValueType.Radio || CurrentNodeType == FlowValueType.Select)
                {
                    if (link.IsAvailable(PageModel.StringValue))
                    {
                        availableLinks.Add(link);
                    }
                }
                else if (CurrentNodeType == FlowValueType.Number)
                {
                    if (link.IsAvailable(PageModel.NumberValue))
                    {
                        availableLinks.Add(link);
                    }
                }
                else if (CurrentNodeType == FlowValueType.Checkbox)
                {
                    if (link.IsAvailable(PageModel.CheckboxValues))
                    {
                        availableLinks.Add(link);
                    }
                }
                else if (CurrentNodeType == FlowValueType.DateTime)
                {
                    if (link.IsAvailable(PageModel.DateTimeValue))
                    {
                        availableLinks.Add(link);
                    }
                }
            }

            if (availableLinks.Count > 1)
            {
                // Go to link with condition since no condition is catch-all
                return availableLinks.First(l => l.HasCondition());
            }
            else
            {
                return availableLinks.First();
            }
        }
    }

    bool CheckboxIsChecked(string flowAnswerValue)
    {
        return PageModel.CheckboxValues?.Contains(flowAnswerValue) ?? false;
    }

    // To be improved
    void CheckboxChanged(string checkboxValue, ChangeEventArgs e)
    {
        PageModel.CheckboxValues ??= new HashSetComparable<string>();
        var isChecked = (bool)e.Value;

        if (isChecked && !PageModel.CheckboxValues.Contains(checkboxValue))
        {
            PageModel.CheckboxValues.Add(checkboxValue);
        }
        else if (!isChecked && PageModel.CheckboxValues.Contains(checkboxValue))
        {
            PageModel.CheckboxValues.Remove(checkboxValue);
        }
    }

    // To add validation
    public class Model
    {
        public string? StringValue { get; set; }

        public decimal? NumberValue { get; set; }

        public HashSet<string>? CheckboxValues { get; set; }

        // Nullable DateTimes not supported; broken in Safari; has built-in validation in FF?
        public DateTime DateTimeValue { get; set; }
    }
}

<style>
    button {
        margin-left: 0.5em;
    }

    input, textarea, select {
        margin-bottom: 1em;
    }

    .radio-answer, .checkbox-answer {
        display: block;
    }
</style>

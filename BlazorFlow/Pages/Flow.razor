@page "/flow"

@using BlazorFlow.Data
@using BlazorFlow.Shared.Components
@using System.ComponentModel.DataAnnotations

@inject FlowService FlowService
@inject NavigationManager NavigationManager

<h1>Flow</h1>

@if (CurrentNode is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="PageModel">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div id="question">
            <p>@CurrentNode.FlowQuestion.FlowQuestionTextEn</p>
        </div>

        @if (CurrentNode.FlowAnswer?.Length > 0) {
            <div id="answer">
                @if (CurrentNode.FlowNodeType == FlowNodeType.radio)
                {
                    @foreach (var answer in CurrentNode.FlowAnswer)
                    {
                        <label>
                            <InputRadio name="radio" SelectedValue="int.Parse(answer.FlowAnswerValue!)" @bind-Value="PageModel.RadioValue" /> @answer.FlowAnswerTextEn
                        </label><br />
                    }
                }
                else if (CurrentNode.FlowNodeType == FlowNodeType.number)
                {
                    <InputNumber TValue="decimal" @bind-Value="PageModel.NumberValue"></InputNumber>
                }
            </div>
        }
    </EditForm>

    <div id="navigation" class="row">
        <button class="btn btn-primary" @onclick="previous" disabled="@isFirstNode">Previous</button>

        @if (isLastNode)
        {
            <button class="btn btn-primary" @onclick="submit">Submit</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="next">Next</button>
        }
    </div>
}

@code {
    BlazorFlow.Data.Flow? CurrentFlow;
    FlowNode? CurrentNode;
    FlowLink[]? CurrentLinks;

    Model PageModel = new Model();

    bool isFirstNode => false;
    bool isLastNode => false;

    protected override async Task OnInitializedAsync()
    {
        var flowVersion = 1;
        CurrentFlow = await FlowService.GetFlow(flowVersion);
        CurrentNode = CurrentFlow.Vertices.First(x => x.FlowQuestion.FlowQuestionCode == "START");
        CurrentLinks = CurrentFlow.OutEdges(CurrentNode).ToArray();
    }

    void next()
    {
        if (CurrentLinks?.Length == 1)
        {
            CurrentNode = CurrentLinks[0].Target;
        }
        else
        {
            var availableLinks = new List<FlowLink>();

            foreach (var link in CurrentLinks!)
            {
                if (link.FlowCondition is { })
                {
                    switch (CurrentNode!.FlowNodeType)
                    {
                        case FlowNodeType.radio: if (link.FlowCondition.Evaluate(PageModel.RadioValue, null)) availableLinks.Add(link);
                            break;
                        case FlowNodeType.number: if (link.FlowCondition.Evaluate(null, PageModel.NumberValue)) availableLinks.Add(link);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (availableLinks.Count == 1)
            {
                CurrentNode = availableLinks[0].Target;
            }
        }

        CurrentLinks = CurrentFlow!.OutEdges(CurrentNode!).ToArray();
    }

    void previous()
    {
    }

    void submit()
    {
        NavigationManager.NavigateTo("/");
    }

    public class Model
    {
        [Range(0, 1)]
        public int RadioValue { get; set; }

        public decimal NumberValue { get; set; }
    }
}

<style>
    button {
        margin: 3px;
    }

    #step {
        min-height: 120px;
    }
</style>
